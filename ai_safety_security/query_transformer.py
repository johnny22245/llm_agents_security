import autogen
import os
import traceback

class QueryTransformer:
    """
    A module to transform sanitized queries into paraphrased or generalized versions
    using an autogenerated agentic flow with GPT-based LLMs.
    """
    def __init__(self, model: str = "gpt-4o-mini"):
        """
        Initializes the QueryTransformer with GPT agent.

        Args:
            api_key (str): The API key for accessing the GPT model.
            model (str): The GPT model to use (default: gpt-4o-mini).
        """
        config_list = autogen.config_list_from_json(
        env_or_file="OAI_CONFIG_LIST.json"
        )

        # Configure an agent with GPT model
        self.agent = autogen.AssistantAgent(
            name="query_paraphraser",
            llm_config={
            "config_list": config_list
        }
        )

    def transform(self, text: str) -> str:
        """
        Transforms a sanitized input query into a paraphrased version using an agent flow.

        Args:
            text (str): The sanitized input text.

        Returns:
            str: The transformed/paraphrased text.
        """
        # Generate paraphrased query using agent
        user_message = f"Paraphrase this query by removing only this tag <PERSONAL_DATA> and replace it with meaningful anonymous context like names Mr./Mrs. X, location: any random location etc.: {text} ** perform this operations only for <PERSONAL_DATA> nothing else."
        result = self.agent.generate_reply(messages=[{"role": "user", "content": user_message}])
        
        if result:
            return result.strip()
        else:
            print("Error in agent response.")
            print(str(traceback.format_exc()))
            return text

if __name__ == "__main__":
    # Example usage of QueryTransformer with agentic flow
    sanitized_text = "Show me cases of privacy protection for <PER> in <LOC>."

    # Replace 'your_api_key' with your OpenAI API key
    api_key = "your_api_key_here"
    transformer = QueryTransformer()

    transformed_text = transformer.transform(sanitized_text)
    print("Sanitized Text:", sanitized_text)
    print("Transformed Text:", transformed_text)